        FairyJS. Your personal Javascript fairy for the website.

FairyJS is kind of framework helping you to serve rich features to your website
visitors easily and with no hassle. By default it doesn't require you to even
know JavaScript in order to make it working.

Let's take a look on how it's all made.

1. HTML integration

FairyJS is transparent to your markup and any other things you can do with your 
HTML. It uses data-* attributes that are valid in HTML5.

2. Supported attributes
   
2.1. Localization plugin

   data-fjs-lang                - Page default language
                                  Applicable to: html
                                  Value: language code (example: en-us)
   
   data-fjs-localizable         - Localizable entity
                                  Applicable to: any
                                  Value: Entity text (example: login
                                                      example: Login box)

2.2. Validation plugin

   data-fjs-validate            - Validation method
                                  Applicable to: form input fields
                                  Value: blur|keypress|click

   data-fjs-required            - Indicates required field
                                  Applicable to: form input fields
                                  Value: true|any

   data-fjs-validator           - List of validators to apply
                                  Applicable to: form input fields
                                  Value: comma separated list of validators
                                         (example: int,regexp)

   data-fjs-validator_param     - Validator parameter
                                  Applicable to: form input fields
                                  Value: depending on parameter meaning
                                        (exmaple: data-fjs-regexp_regex="\d{4}")

   data-fjs-validator_error_message  
                                - Validator error message
                                  Applicable to: form input fields
                                  Value: string
                                    (example: data-fjs-int_error_message="Oops")

2.3. Drag and Drop plugin

   data-fjs-draggable           - Indicates that the item can be dragged
                                  Applicable to: any
                                  Value: containment
                  (see: http://jqueryui.com/demos/draggable/#option-containment)


   data-fjs-draggable-cursor    - Sets cursor for object while dragging
                                  Applicable to: data-fjs-draggable
                                  Value: CSS curson definition

   data-fjs-draggable-revert    - Sets item to restore its position after it is
                                  dragged to droppable container.
                                  Applicable to: data-fjs-draggable
                                  Value: valid|invalid|true (true = "always")

   data-fjs-draggable-clone     - Sets options to clone draggable item on drag
                                  Applicable to: data-fjs-draggable
                                  Value: any

   data-fjs-drop-to             - Sets the container to drop to
                                  Applicable to: data-fjs-draggable
                                  Value: Container ID (see: data-fjs-droppable)

   data-fjs-droppable           - Indicates container to drop items to
                                  Applicable to: any
                                  Value: any (defines container ID for
                                  data-fjs-drop-to)

   data-fjs-highlight-class     - Sets the CSS class to highlight container
                                  while dragging
                                  Applicable to: data-fjs-droppable
                                  Value: CSS class name

   data-fjs-ondrop              - JavaScript to execute on drop event
                                  Applicable to: data-fjs-droppable
                                  Value: Valid JavaScript code
                                  Code can use the following variables:
                                    $ev     - jQuery event
                                    $what   - The item dropped
                                    $where  - The container object
2.4. Facebook integration plugin

   data-fjs-fb-appid            - Facebook Application ID
                                  Value: Application ID given by Facebook

   data-fjs-fb-xd               - Path to Cross-Domain receiver script needed by
                                  IE in order to work.
                                  Value: Fully qualified URL to xd_receiver.html
                                  or similar

   data-fjs-fb-login            - Makes element triggering Facebook Login.
                                  Value: "basic" or comma separated list of 
                                  extended permissions to require
                                  (see https://developers.facebook.com/docs/reference/api/permissions/)

   data-fjs-fb-feed-link        - Makes element triggering Feed publishing dialog
                                  and specifies the link to be shared.
                                  Value: Must be fully qualified URL

   data-fjs-fb-feed-name        - Sets the name for Feed dialog.
                                  Value: Any

   data-fjs-fb-feed-picture     - Sets the image for Feed dialog.
                                  Value: Must be fully qualified URL

   data-fjs-fb-feed-caption     - Sets the caption for the link in Feed dialog.
                                  Value: any

   data-fjs-fb-feed-description - Sets the description for the link in Feed dialog.
                                  Value: any

  data-fjs-fb-apprequest-message -Makes element triggering AppRequest dialog and
                                  specifies a message for request.
                                  Value: any

   data-fjs-fb-apprequest-to    - Sets target Facebook User IDs (FBUUIDs) to send
                                  AppRequest to. Used in addition to
                                  data-fjs-fb-apprequest-message
                                  Value: Comma separated list of FBUUIDs

  data-fjs-fb-apprequest-filters -Sets filters for AppRequest dialog
                                  Value: all,app_users,app_non_users
   
  data-fjs-fb-apprequest-exclude -Sets list of FBUUIDs to exlude from selector
                                  Value: Comma separated list of FBUUID

   data-fjs-fb-apprequest-max   - Sets maximum available recipients for the request
                                  Value: integer

   data-fjs-fb-apprequest-data  - Sets user data to AppRequest for further track
                                  Value: any, 255 chars max

  data-fjs-fb-apprequest-title  - Sets title for the request popup
                                  Value: any, 50 chars max

   data-fjs-fb-autosize         - Tells FairyJS to autosize Facebook Canvas to
                                  fit your app page as much as possible
                                  Value: any

3. JavaScript interface

3.1. Core object

    Core object is named $$.fjs. FairyJS depends on jQuery and provides a 
shortcut for jQuery object named $$. This helps keeping shortcut short in case
when jQuery is used in non conflicting mode.
    Core object is nothing but container for plugins which build the core as of
your needs. Every plugin can be added or removed without breaking up things.
Except the plugins that have requirements on other plugins.

3.2. FairyJS configuration
    
    FairyJS has minimum configuration options by default. However configuration
can be extended by plugins. Here are the default set of options:
    
    debugMode           - Debug mode
                          Provides some useful information on runtime in 
                          browser console.
                          Default: false
    verboseMode         - Verbose mode
                          Provides some internal debug information and activates
                          $$.fjs.log function
                          Default: false
    
3.2.1 Localization plugin options
    
    Localization plugin extends the core configuration with following options:

    langFile            - Language file template
                          Defines the mask of the file containing language data
                          Default: fjs_%@.js

    langPath            - Path to language files
                          Defines the place language files can be accessed at
                          Default: lang/ (Trailing slash is required)

    defaultLang         - Default language to use if no language is specified
                          Default: en-us


3.3. Core object interface methods:

    configure(configuration)                    - Sets configuration options
                                                  Overrides default values for
                                                  given options.
                                                  Example:
                                                    $$.fjs.configure({
                                                        debugMode: true
                                                    });

    log(message)                                - Logs message to console
                                                  Used for some verbose output.
                                                  Controlled by verboseMode
                                                  config option.

    warn(message)                               - Logs warning to console
                                                  Used to warn user about some
                                                  non-critical situations.
                                                  Controlled by debugMode
                                                  config option.

    error(message)                              - Logs error to console
                                                  Used to notify user about some
                                                  critical error.
                                                  Controlled by debugMode
                                                  config option.

    plugin(name, definition, requiredPlugins)   - Registers plugin
                                                  name - Plugin name
                                                  definition - Plugin object
                                                  requiredPlugins - list of
                                                  required plugins to start.
                                                  Plugin object is accessible
                                                  via $$.fjs.name

    hasPlugin(name)                             - Checks if plugin with given
                                                  name is loaded and registered


3.3.1. Localization plugin interface methods
    
    $$_(entity)                                 - Shortcut for translation
                                                  Translates given entity to
                                                  currently active language

    set(lang)                                   - Activates given language
                                                  Loads language file if needed,
                                                  then translates all applicable
                                                  entities to the given language
                                                  lang - Language code
                                                         (example: en-us)

    addEntity(langName, entity, translation)    - Adds localizable entity
                                                  langName - Language code
                                                  entity - Entity code
                                                  translation - Entity for given
                                                  langName
                                                  Example: 
                                                  $$.fjs.lang.addEntity(
                                                    'en-us',
                                                    'Test',
                                                    'This is a test'
                                                  );

    add(langName, definition)                   - Registers language
                                                  Used by language files to 
                                                  claim their load.
                                                  langName - Language code
                                                  definition - Language object
                                                  Example:
                                                  $$.fjs.lang.add('en-us', {
                                                    'entity' : 'Translation'
                                                  });

3.3.2. Validation plugin interface methods

    add(name, definition, defaultConfig)       - Registers validator
                                                 Every validatior has to be
                                                 registered before use.
                                                 name - Validator name
                                                 definition - Validation func
                                                 defaultConfig - Object
                                                 Example:
                                                 $$.fjs.validate.add(
                                                    'foo',
                                                    function(value, config) {
                                                     return value==config.param;
                                                    },
                                                    {
                                                        param: 1
                                                    }
                                                 );
                                                 Params can be set with 
                                                 data-fjs-validator_param as 
                                                 described in 2.2

    field($input)                              - Validates the field
                                                 $input - jQuery object matching
                                                 :input selector
                                                 Returns true if field is valid
                                                 or false otherwise

    fieldError($input)                         - Returns field validation error
                                                 $input - jQuery object matching
                                                 :input selector

3.3.3. Drag and Drop plugin interface methods

   setDraggable([$object])                    - Initializes object as draggable
                                                $object - jQuery object to act 
                                                on, acts on all 
                                                data-fjs-draggable if not set.
                                                

   setDroppable([$object])                    - Initializes object as droppable
                                                $object - jQuery object to act 
                                                on, acts on all 
                                                data-fjs-droppable if not set.

   disableDragFor($object)                    - Disables dragging for $object
                                                $object - jQuery object

   enableDragFor($object)                     - Enables dragging for $object
                                                $object - jQuery object

   disableDropFor($object)                    - Disables dropping for $object
                                                $object - jQuery object

   enableDropFor($object)                     - Enables dropping for $object
                                                $object - jQuery object

   jQuery.fn.makeDraggable                    - Handy jQuery extention which is
                                                an alias to 
                                                $$.fjs.dragndrop.setDraggable

   jQuery.fn.makeDroppable                    - Handy jQuery extention which is
                                                an alias to 
                                                $$.fjs.dragndrop.setDroppable

3.3.4. Facebook integration plugin interface methods
   
    isLoggedIn()                              - Tells if user is logged in to
                                                Facebook

    getUserId()                               - Return Facebook User ID (FBUUID)
                                                if logged in, or NULL if not

    requestProfile()                          - Starts asynchronous user profile
                                                request

    login(scope)                              - Performs user login and permissions
                                                request.
                                                scope - Extended pemissions list
                                                as of https://developers.facebook.com/docs/reference/api/permissions/

    publish(name, link, picture, caption, description)
                                              - Performs Feed dialog with given 
                                                parameters.

    sendAppRequest(message, userIds, filters, excludeIds, maxRecpt, data, title)
                                              - Performs AppRequest dialog with
                                                given parameters

    sendAdvancedAppRequest(params)            - Performs AppRequest dialog with
                                                advanced parameters (object which
                                                is passed directly to FB.ui)

4. Events in FairyJS

   FairyJS provides simplified mechanisms of working with events subsystem. Of
course it's built over jQuery events, however it provides you the easiest way of
handling it.

    $$.fjs.subscribe(event, callback)         - Subscribes for the given event
                                                event    - Event name
                                                callback - Callback func
                                                Example:
                                                $$.fjs.subscribe(
                                                   'org.fjs.testEvent',
                                                    function($ev, p1, p2, p3) {
                                                        alert(p2);
                                                    }
                                                );


    $$.fjs.fire(event, [param1, ... , paramN] - Fires event with parameters
                                                event  - Event name
                                                paramX - Data parameter
                                                Example:
                                         $$.fjs.fire('org.fjs.testEvent',1,2,3);
                                                

4.1. Events from Drag and Drop plugin
    
    org.fjs.dragndrop.drop                    - Gets fired when some object is
                                                dropped to a container
                                                Parameters:
                                                $ev    - Event
                                                $what  - What was dropped
                                                $where - Container $what was
                                                         dropped to

    org.fjs.dragndrop.drag.start              - Gets fired when dragging starts
                                                Parameters:
                                                $ev    - Event
                                                $what  - What was dropped
                                                $ui    - jQuery ui parameter

    org.fjs.dragndrop.drag.stop               - Gets fired when dragging stops
                                                Parameters:
                                                $ev    - Event
                                                $what  - What was dropped
                                                $ui    - jQuery ui parameter

4.2. Events from Facebook plugin

    org.fjs.facebook.login_status.change      - Gets fired when Facebook login
                                                status changes
                                                Parameters:
                                                $ev         - Event
                                                isLoggedIn  - Current login status

    org.fjs.facebook.profile_request.complete - Gets fired when Facebook user
                                                profile request is finished
                                                Parameters:
                                                $ev         - Event
                                                profile     - FB.api('/me') response
                                                              with user profile

    org.fjs.facebook.publish.complete         - Gets fired when Facebook Feed
                                                dialog completes.
                                                Parameters:
                                                $ev         - Event
                                                response    - Facebook response

    org.fjs.facebook.apprequest.complete      - Gets fired when Facebook AppRequest
                                                dialog completes
                                                Parameters:
                                                $ev         - Event
                                                response    - Facebook response
                                                    

5. Building language files for localization plugin
    
    Making language file is easy as you only need to specify the entities and 
translations for them.
    Example:
    $$.fjs.lang.add('en-en', {
        'Entity' : 'Test translation'
    });

After this language file is loaded you will get "Test translation" in response
to $$_('Entity') or other translation methods.


6. Extending FairyJS

   As told before, FairyJS is a set of plugins. Writing plugin is easy as never!
You can to provide an object defining a set of functions and you're ready to go.
Default plugin is:

$$.fjsPlugin = {
    register: function() {
        
    }
}

Your plugins extend this options by default. Let's imagine you need a plugin for
alerting text on clicks to objects tagged with data-fjs-alert attribute. 
Here's how you can make it:

$$.fjs.plugin('alertPlugin', {
    register: function() {
        $$('data-fjs-alert').click(function() {
            alert($$(this).attr('data-fjs-alert');
        });
    }
});

Simple, isn't it?
Method "register" is called on page load for all registered plugins.
If your plugin needs to provide some methods for outer code, just describe them:

$$.fjs.plugin('alertPlugin', {
    register: function() {
        $$('data-fjs-alert').click(function() {
            alert($$(this).attr('data-fjs-alert');
        });
    },

    alert: function(message) {
        alert(message);
    }
});

Now you can access it via $$.fjs.alertPlugin.alert('Something');

6. Extending validation

    Each validator is a single standalone entity. You can add any validators you 
need if FairyJS doesn't provide ones.
Example: Validating value against another value

$$.fjs.validate.add('against', function(value, params) {
    return value == params.anotherValue;
},
{
    anotherValue: 0
});

To use the validator, simply assign it to the form field:

<input type="text" name="some" value="" data-fjs-validate="blur" 
data-fjs-validator="against" data-fjs-against_anotherValue="Test" 
data-fjs-against_error_message="Please enter 'Test'" />

